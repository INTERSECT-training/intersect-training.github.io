- name: Introduction to version control with Git
  url: https://coderefinery.github.io/git-intro/
  author: CodeRefinery
  description: Introductory/intermediate lesson on version control using Git. It starts from the basics but proceeds to cover branching, merging, conflict resolution, inspecting history, sharing repositories online, undoing, using the staging area, aliases/configuration, Git under the hood. **[Tutorial]**
  tags: {Git}
- name: Collaborative distributed version control with Git
  url: https://coderefinery.github.io/git-collaborative
  author: CodeRefinery
  description: Intermediate lesson on collaborative distributed version control with Git. Covers remotes, pull requests, code review, centralized and forking workflows, Git hooks, bare vs non-bare repositories. **[Tutorial]**
  tags: {Git, Collaboration}
- name: Reproducible research
  url: https://coderefinery.github.io/reproducible-research/
  author: CodeRefinery
  description: Lesson on different methods and tools for better reproducibility in research software and data. It demonstrates how version control, workflows, containers, and package managers can be used to record reproducible environments and computational steps. **[Tutorial]**
  tags: {Reproducibility}
- name: Software testing
  url: https://coderefinery.github.io/testing/
  author: CodeRefinery
  description: This lesson is about why testing often needs to be part of the software development cycle and how such a cycle can be implemented. In demonstrates how automated testing works and shows how tests can be designed and implemented in different programming languages. **[Tutorial]**
  tags: {CI, Testing}
- name: Modular code development
  url: https://coderefinery.github.io/modular-type-along/
  author: CodeRefinery
  description: Type-along/demo on aspects of (un)modular code development. Focus is on the “why”, not on the “how”. **[Tutorial]**
  tags: {Software Engineering, Design}
- name: Code documentation
  url: https://coderefinery.github.io/documentation/
  author: CodeRefinery
  description: This lesson discusses different solutions for implementing and deploying code documentation. It shows how to build documentation with the documentation generator Sphinx (and compare it with others) and how to deploy it to Read the Docs, a service which hosts open documentation for free. It also shows how to deploy a project website or personal homepage to GitHub Pages. **[Tutorial]**
  tags: {Documentation}
- name: Social coding
  url: https://coderefinery.github.io/social-coding/
  author: CodeRefinery
  description: This lesson is about how and why to share code, what kind of licenses are used in what situation and how software can be cited. **[Tutorial]**
  tags: {Licensing}
- name: High Performance Data Analytics in Python
  url: https://enccs.github.io/HPDA-Python/
  author: ENCCS
  description: This lesson gives an overview of working with research data in Python using general libraries for storing, processing, analysing and sharing data. The focus is on high performance. After covering tools for performant processing on single workstations the focus shifts to profiling and optimising, parallel and distributed computing and finally GPU computing. **[Tutorial]**
  tags: {Python in Research, Performance}
- name: Julia for high-performance scientific computing
  url: https://enccs.github.io/Julia-for-HPC/
  author: ENCCS
  description: This lesson starts with the basics of Julia, its syntax, multiple-dispatch paradigm, package development and best practices. It then moves on to topics relevant to high-performance scientific computing, including an overview of powerful libraries for modeling and machine learning, visualization, parallelization and GPU computing. **[Tutorial]**
  tags: {Performance}
- name: CMake hands-on workshop
  url: https://enccs.github.io/cmake-workshop/
  author: ENCCS
  description: CMake is a language-agnostic, cross-platform build tool and is nowadays the de facto standard, with large projects using it to reliably build, test, and deploy their codebases. You will learn how to Write a CMake build system for C, C++, and Fortran projects producing libraries and/or executables; Run tests for your code with CTest; Ensure your build system will work on different platforms; Detect and use external dependencies in your project; Safely and effectively build mixed-language projects (Python+C/C++, Python+Fortran, Fortran+C/C++). **[Tutorial]**
  tags: {Packaging}
- name: Improving Reproducibility Through Better Software Practices
  url: https://press3.mcs.anl.gov/atpesc/files/2020/08/ATPESC-2020-Track-7-Talk-9-Bernholdt-Reproducibility.pdf
  author: David E. Bernholdt
  location: ATPSEC
  location_url: https://extremecomputingtraining.anl.gov/
  date: 2020-08-06
  description: This presentation provides some background on the origins of concerns about reproducibility, some of the actions the larger community is taking to raise awareness and attention to it, and a more extensive discussion of how to make software-based research more reproducible at all stages of the R&D process. **[Slides]**
  tags: {Reproducibility}
- name: Continuous Integration
  url: https://press3.mcs.anl.gov/atpesc/files/2020/08/ATPESC-2020-Track-7-Talk-08-Miller-ContinuousIntegration.pdf
  author: Mark C. Miller
  location: ATPSEC
  location_url: https://extremecomputingtraining.anl.gov/
  date: 2020-08-06
  description: A short and broad brush answer to the question “What is Continuous Integration?”.  Several of the key concepts related to Continuous Integration testing are introduced including the use of either local or cloud resources as well as a brief hands-on example with TravisCI and Codecov. **[Slides]**
  tags: {CI}
- name: High-Performance Python and Interoperability with Compiled Code
  url: https://github.com/jpivarski-talks/2019-04-08-picscie-numpy
  author: Jim Pivarski
  location: Princeton University Workshop
  date: 2019-04-08
  location_url: https://researchcomputing.princeton.edu/events/high-performance-python-and-interoperability-compiled-code-48-410
  description: This three day workshop examines the numerical processing ecosystem that has grown up around Python. The key library in this ecosystem is Numpy, which enables fast array programming and also provides a common data structure for sharing large, numerical datasets. We will walk through the process of restructuring "for loop" algorithms as "columnar" algorithms based on Numpy, as well as using Numba to speed up "for loop" algorithms by compiling the Python code. We'll do the same on a GPU using CuPy (a Numpy clone written for GPUs) and Numba. We'll also explore methods of mixing Python and C++, both for performance and for compatibility with existing libraries. Finally, I'll introduce Pandas as a convenient front-end to Numpy for data analysis. **[Workshop]**
  tags: {Python in Research, Performance}
- name: Accelerating Python
  url: https://github.com/jpivarski-talks/2019-07-23-codas-hep
  author: Jim Pivarski
  description: Numba is an alternative that compiles Python to run as fast as C, but only if the code consists purely of numbers and arrays that don't change type. Quite a few call out to C++, such as pybind11, Cython, and PyROOT, which is another way of escaping Python for tight loops. There are also many tools to parallelize Python, though there are some pitfalls to consider. **[Hands-on]**
  location: CoDaS-HEP 2019
  location_url: http://codas-hep.org/
  tags: {Python in Research, Performance}
- name: Introduction to Software Licensing
  date: 2018-12-05
  author: David E. Bernholdt, ORNL
  url: https://dx.doi.org/10.6084/m9.figshare.7409573
  description: Software licensing and related matters of intellectual property can often seem confusing or hopelessly complicated, especially when many present their opinions as dogma. This presentation takes a different approach getting you to think about software licensing from the standpoint of what you want others to be able to do (or not do) with your software. We will start by developing a common understanding of the terminology used around software licenses. Then we’ll consider various scenarios of what you might want to accomplish with a software license, and what to look for in the license. We’ll also discuss some pragmatic issues around actually applying a license to your software. A list of resources will be provided to help with further exploration of these topics. **[Slides]**
  location: IDEAS-Producitivity
  location_url: https://ideas-productivity.org/events/hpc-best-practices-webinars/
  tags: {Software, Licensing}
- name: Modern CMake
  url: https://hsf-training.github.io/hsf-training-cmake-webpage/
  author: Henry Schreiner
  description: The aim of this tutorial is to cover the basics of using CMake. This workshop covers the basics of making and building a project, and some details of design. **[Tutorial]**
  location: US-ATLAS Computing Bootcamp 2020
  location_url: https://matthewfeickert.github.io/usatlas-computing-bootcamp-2020/
  tags: {Build, Packaging}
- name: "Open Source Best Practices: From Continuous Integration to Static Linters"
  date: 2018-10-17
  author: Daniel Smith and Ben Pritchard, Molecular Sciences Software Institute (MolSSI)
  url: http://ideas-productivity.org/wordpress/wp-content/uploads/2018/10/webinar023-osbp.pdf
  description: This webinar will continue the discussion of open source software (OSS) opportunities within the scientific ecosystem to include the many cloud and local services available to OSS free of charge. The services to be discussed include continuous integration, code coverage, and static analysis. The presenters will demonstrate the usefulness of these tools and how a small time investment at the beginning is traded for long-term benefits. These services and ideas are agnostic to software language or HPC software application and should apply to any party interested in tools that help ease the burden of software maintenance. **[Slides]**
  location: IDEAS-Producitivity
  location_url: https://ideas-productivity.org/events/hpc-best-practices-webinars/
  tags: {CI}
- name: Research Reproducibility in Theory and Practice (Examples and Focus on Biological Sciences)
  url: https://github.com/danielskatz/repro-fdtd1d
  date: 2020-08-12
  author: Daniel S. Katz
  location: FSCI 2020
  location_url: https://www.force11.org/fsci/2020/fsci-2020-course-abstracts#W20
  description: This course will focus on issues of reproducibility in research from a broad perspective. It will include an introduction to the differing types of reproducibility, and a discussion of grant review guidelines and the philosophy that underpins them. **[Slides] [Hands-on]**
  tags: {Reproducibility}
- name: "Continuous Integration / Continuous Development (CI/CD): Introduction"
  url: https://hsf-training.github.io/hsf-training-cicd/
  author: Giordon Stark
  location: HEP Software Foundation (HSF)
  location_url: https://hepsoftwarefoundation.org/
  description: The aim of this module is to explore what it means to build a CI/CD workflow and expand on concepts unique to GitLab’s CI/CD which is essential to anyone working in ATLAS. **[Hands-on] [Video]**
  tags: {CI}
- name: Introduction to Docker
  url: https://hsf-training.github.io/hsf-training-docker/index.html
  author: Matthew Feickert
  location: HEP Software Foundation (HSF)
  location_url: https://hepsoftwarefoundation.org/
  description: An opinionated introduction to using Docker as a software development tool. **[Tutorial]**
  tags: {Containers}
- name: Introduction to Software Design
  url: http://carver.cs.ua.edu/Slides/2019/URSSI-WinterSchool/URSSI-WinterSchool-Design.pdf
  author: Jeff Carver
  location: URSSI Winter School
  location_url: https://github.com/si2-urssi/winterschool/blob/master/README.md
  date: 2019-12-17
  description: This presentation provides some background on Software Design. **[Slides]**
  tags: {Software Engineering, Design}
- name: Think Like a Programmer
  url: https://docs.google.com/presentation/d/1eNpMYEyS2x92P2r94pWwykfHSS2KaRHxzRsRN85WFh0/edit#slide=id.p
  author: Andrew Loftus
  location: URSSI Winter School
  location_url: https://github.com/si2-urssi/winterschool/blob/master/README.md
  date: 2019-12-17
  description: This presentation provides the paradigms for program design. **[Slides] [Hands-on]**
  tags: {Software Engineering}
- name: Basics of Packaging Python Programs
  url: https://kyleniemeyer.github.io/research-software-dev-modules/module-packaging/
  author: Kyle Niemeyer
  location: URSSI Winter School
  location_url: https://github.com/si2-urssi/winterschool/blob/master/README.md
  date: 2019-12-17
  description: This Presentation provides basics on python packages. **[Slides] [Hands-on]**
  tags: {Packaging, Python in Research}
- name: Collaboration with Git & GitHub
  url: https://inundata.org/talks/git-collaboration/#/
  author: Karthik Ram
  location: URSSI Winter School
  location_url: https://github.com/si2-urssi/winterschool/blob/master/README.md
  date: 2019-12-18
  description: This talk provides on the basics of Collaboration with Git & GitHub. **[Slides]**
  tags: {Git, Collaboration}
- name: Git Exercises
  url: https://jameshowison.github.io/peer_production_course/docs/additional_git_exercises.html
  author: James Howison
  location: URSSI Winter School
  location_url: https://github.com/si2-urssi/winterschool/blob/master/README.md
  date: 2019-12-18
  description: Collaborative git exercises to be done in groups of three people. **[Hands-on]**
  tags: {Git, Collaboration}
- name: Software Testing and Continuous Integration
  url: https://kyleniemeyer.github.io/research-software-dev-modules/module-testing-ci/
  author: Kyle Niemeyer
  location: URSSI Winter School
  location_url: https://github.com/si2-urssi/winterschool/blob/master/README.md
  date: 2019-12-18
  description: This Lecture provides on the basics of softwate testing and continuous integration. **[Slides] [Hands-on]**
  tags: {Testing, CI}
- name: Contemporary Peer Code Review Practices in Research Software
  url: http://carver.cs.ua.edu/Slides/2019/URSSI-WinterSchool/URSSI-WinterSchool-PeerCodeReview.pdf
  author: Jeff Carver
  location: URSSI Winter School
  location_url: https://github.com/si2-urssi/winterschool/blob/master/README.md
  date: 2019-12-19
  description: This presentation provides on Peer Code Review Practices in Research Software. **[Slides] [Hands-on]**
  tags: {Collaboration, Software Engineering}
- name: Open Science & Software Citation
  url: https://kyleniemeyer.github.io/research-software-dev-modules/module-open-science/
  author: Kyle Niemeyer
  location: URSSI Winter School
  location_url: https://github.com/si2-urssi/winterschool/blob/master/README.md
  date: 2019-12-19
  description: This lecture provides on licensing, copyright, open science practices and software citation. **[Slides]**
  tags: {Software, Licensing}
- name: Documentation
  url: https://kyleniemeyer.github.io/research-software-dev-modules/module-documentation/
  author: Kyle Niemeyer
  location: URSSI Winter School
  location_url: https://github.com/si2-urssi/winterschool/blob/master/README.md
  date: 2019-12-19
  description: This talk provides on the basics of software documentation. **[Slides] [Hands-on]**
  tags: {Documentation, Software Engineering}
- name: "High Performance Python: CPUs"
  url: https://github.com/henryiii/python-performance-minicourse
  author: Henry Schreiner
  location: Princeton University Workshop
  location_url: https://researchcomputing.princeton.edu/events/high-performance-python-cpus-1
  date: 2020-11-04
  description: This workshop will introduce participants to high performance Python using techniques such as Just In Time (JIT) compilation through Numba. We will look at several problems, and develop solutions using several different techniques, and compare the performance gained by doing so with the (potential) loss in expressivity and clarity. **[Hands-on]**
  tags: {Python in Research, Performance}
- name: "High Performance Python: GPUs"
  url: https://github.com/henryiii/pygpu-minicourse
  author: Henry Schreiner
  location: Princeton University Workshop
  location_url: https://researchcomputing.princeton.edu/events/high-performance-python-gpus
  date: 2019-12-04
  description: This workshop will introduce participants to high performance Python on GPUs using tools to provide “simplified” GPU programming, as well as offer a brief look into creating custom kernels by hand. **[Hands-on]**
  tags: {Python in Research, Performance}
- name: Agile Methodologies
  url: https://press3.mcs.anl.gov/atpesc/files/2020/08/ATPESC-2020-Track-7-Talk-3-Willenbring-AgileProjMgmt.pdf
  author: James M. Willenbring
  location: ATPSEC
  location_url: https://extremecomputingtraining.anl.gov/
  date: 2020-08-06
  description: This talk provides a basic introduction to Agile methodologies as well as how to apply them to a small computational science team. There is a focus on starting with a small number of practices and building from there, rather than adopting a heavy-weight process. **[Slides]**
  tags: {Collaboration, Software Engineering}
- name: Scientific Software Design
  url: https://press3.mcs.anl.gov/atpesc/files/2020/08/ATPESC-2020-Track-7-Talk-5-Dubey-SoftwareDesign.pdf
  author: Anshu Dubey
  location: ATPSEC
  location_url: https://extremecomputingtraining.anl.gov/
  date: 2020-08-06
  description: This lecture provides a basic of Scientific Software Design methodology. **[Slides]**
  tags: {Software Engineering, Development}
- name: Software Testing
  url: https://press3.mcs.anl.gov/atpesc/files/2020/08/ATPESC-2020-Track-7-Talk-06-SoftwareTesting.pdf
  author: Anshu Dubey
  location: ATPSEC
  location_url: https://extremecomputingtraining.anl.gov/
  date: 2020-08-06
  description: This presentation provides a basic of software testing and verification. **[Slides]**
  tags: {Testing, Software Engineering}
- name: Refactoring
  url: https://wordpress.cels.anl.gov/atpesc/wp-content/uploads/sites/96/2020/08/ATPESC-2020-Track-7-Talk-7-Dubey-Refactoring-1.pdf
  author: Anshu Dubey
  location: ATPSEC
  location_url: https://extremecomputingtraining.anl.gov/
  date: 2020-08-06
  description: This presentation provides a basic of Refactoring. **[Slides] [Hands-on]**
  tags: {Refactoring}
- name: Writing Clean Scientific Software
  url: https://zenodo.org/record/3922957#.YDZwfi2cbUJ
  author: Nick Murphy
  description: This presentation discusses strategies for writing clean scientific software. This presentation encourages us to think of code as communication. **[Slides]**
  tags: {Software Engineering}
- name: Python Packages
  url: https://py-pkgs.org/
  author: Tomas Beuzen & Tiffany Timbers
  description: Python Packages is an open source textbook that describes modern and efficient workflows for creating Python packages. **[Hands-on]**
  tags: {Packaging, Python in Research}
- name: The Turing Way Collaboration guideline
  url: https://the-turing-way.netlify.app/collaboration/collaboration.html
  author: The Turing Way Community
  description: This guide covers topics related to effective and inclusive collaboration. **[Tutorial]**
  tags: {Collaboration}
- name: Research Software Engineering with Python
  url: https://merely-useful.github.io/py-rse/index.html
  author: Damien Irving, Kate Hertweck, Luke Johnston, Joel Ostblom, Charlotte Wickham, and Greg Wilson
  description: A semester-long course in Research Software Engineering with Python targeting researchers who are already using Python for their data analysis, but who want to take their coding and software development to the next level. **[Tutorial]**
  tags: {Python in Research}
- name: Best Practices in Python Package Development
  url: https://education.molssi.org/python-package-best-practices/
  author: The Molecular Sciences Software Institute
  author_url: https://molssi.org/
  description: This workshop is designed for researchers in the chemical sciences. In this course, students create a Python package using the MolSSI CookieCutter. The workshop covers an introduction to version control, hosting on GitHub, project collaboration, testing, and documentation strategies. **[Tutorial]**
  tags: {Python in Research, Packaging, Development}
- name: "Python 201: Building Better Scientific Software in Python"
  url: https://python-tutorial.dev/201/index.html
  author: Geoffrey Lentner
  location: PEARC21
  location_url: https://pearc.acm.org/pearc21/
  date: 2021-07-19
  description: This tutorial exposes researchers to several best practices in scientific software engineering including Python packaging, automated testing, documentation management, logging, command-line interfaces, performance profiling and optimization. **[Tutorial]**
  tags: {Python in Research, Packaging, Development, Testing}
- name: "Powerful Python Packaging for Scientific Codes"
  url: https://github.com/henryiii/skdevtalk/blob/main/PowerfulPackagingForPythonCodes.ipynb
  author: Henry Schreiner
  author_url: http://iscinumpy.gitlab.io
  location: PyHEP 2021
  location_url: https://indico.cern.ch/event/1019958/timetable/#3-powerful-python-packaging-fo
  date: 2021-07-08
  description: This talk covers the the best practices of making a highly compatible and installable Python package based on the [Scikit-HEP developer guidelines](https://scikit-hep.org/developer) and scikit-hep/cookie. There is a strong focus on compiled extensions. The latest developments in key libraries, like pybind11, cibuildwheel, and build are covered, along with potential upcoming advancements in Scikit-Build + CMake. **[Hands-on]**
  tags: {Python in Research, Packaging}
- name: "Level Up Your Python"
  url: https://henryiii.github.io/level-up-your-python
  author: Henry Schreiner
  author_url: http://iscinumpy.gitlab.io
  location: PyHEP 2021
  location_url: https://indico.cern.ch/event/1019958/timetable/#53-level-up-your-python-part-i
  date: 2021-07-05
  description: Part 1 covers class design patterns, the python memory model, debugging, profiling, and more. Part 2 covers Python features and packaging. Part 3 covers common Python packages. **[Tutorial]**
  tags: {Python in Research}
- name: "Managing Research Software Projects"
  url: https://swcarpentry.github.io/managing-research-software-projects/
  author: Daniel Standage, Greg Wilson
  description: Describe the basics of software project management with a particular focus on the sorts of projects commonly found in research settings. **[Tutorial]**
  tags: {Software Engineering,Development}
- name: "Intermediate Research Software Development in Python"
  url: https://carpentries-incubator.github.io/python-intermediate-development/
  author: Steve Crouch, James Graham, Sam Mangham
  description: This course aims to teach a core set of established, intermediate-level software development skills and best practices for working as part of a team in a research environment using Python. **[Workshop]**
  tags: {Git, Collaboration, Testing, Python in Research, Design}
